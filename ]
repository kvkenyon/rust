use std::rc::Rc;
use std::sync::{mpsc, Arc, Mutex};
use std::thread;
use std::time::Duration;

pub fn test() {
    println!("[Threads] start..");
    let handle = thread::spawn(|| {
        for i in 1..10 {
            println!("Hi from child thread {i}");
        }
        thread::sleep(Duration::from_millis(3));
    });

    handle.join().unwrap();

    for i in 1..5 {
        println!("Hi from main thread {i}");
        thread::sleep(Duration::from_millis(3));
    }

    using_move_closures_with_threads();

    message_passing();

    message_passing_multiple_values();

    shared_state_concurrency_mutex();
}

fn using_move_closures_with_threads() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(move || {
        for i in 0..v.len() {
            println!("v[{i}]={}", v[i]);
        }
    });

    handle.join().unwrap();
}

fn message_passing() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let msg = String::from("Hi!");
        println!("tx sent: {msg}");
        tx.send(msg).unwrap();
    });

    let result = rx.recv().unwrap();
    println!("rx recv: {result}");
}

fn message_passing_multiple_values() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let vals = vec![
            String::from("Message 1"),
            String::from("Message 2"),
            String::from("Message 3"),
            String::from("Message 4"),
            String::from("Message 5"),
        ];

        for val in vals {
            tx.send(val).unwrap();
            thread::sleep(Duration::from_secs(1));
        }
    });

    for received in rx {
        println!("got: {received}");
    }
}

fn shared_state_concurrency_mutex() {
    let m = Mutex::new(5);

    {
        let mut num = m.lock().unwrap();
        *num = 6;
    }

    println!("m={m:?}");
}

fn multiple_owners_multiple_threads_mutex() {
    let counter = Arc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0..10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut val = counter.lock().unwrap();
            *val += 1;
        });
        handles.push(handle);
    }

    for h in handles {
        h.join().unwrap();
    }
    println!("counter = {}", counter.lock().unwrap());
}
